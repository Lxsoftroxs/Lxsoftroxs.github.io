name: Notify Subscribers of New Content

on:
  push:
    paths:
      - "_posts/**"
      - "assets/images/**"  # Triggers when new posts or images are added
    branches:
      - main

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install msmtp and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y msmtp msmtp-mta jq

      - name: Configure msmtp
        run: |
          cat <<EOF > ~/.msmtprc
          account default
          host smtp.gmail.com
          port 587
          auth on
          tls on
          tls_starttls on
          user ${{ secrets.EMAIL_USER }}
          password ${{ secrets.EMAIL_PASS }}
          from ${{ secrets.EMAIL_USER }}
          logfile ~/.msmtp.log
          EOF
          chmod 600 ~/.msmtprc

      - name: Fetch subscribers
        run: |
          if [ -f subscribers.json ]; then
            emails=$(jq -r '.[]' subscribers.json | paste -sd, -)
            echo "EMAIL_LIST=$emails" >> $GITHUB_ENV
          else
            echo "EMAIL_LIST=" >> $GITHUB_ENV
          fi

      - name: Get latest post details
        run: |
          # 1. Try to get the most recently ADDED .md file in _posts/
          POST_FILE=$(git log --name-only --pretty=format: --diff-filter=A -n 1 -- _posts/ | grep '.md' | tail -n1)
          # 2. Fallback: if no new file was found, use the newest (by modification time)
          if [ -z "$POST_FILE" ]; then
            POST_FILE=$(ls -t _posts/*.md | head -n1)
          fi
          # 3. If STILL empty, fail the workflow
          if [ -z "$POST_FILE" ]; then
            echo "Error: No post file found." >&2
            exit 1
          fi
          # 4. Extract title from YAML front matter (strip quotes)
          TITLE=$(grep -m1 "^title:" "$POST_FILE" | sed 's/^title:[[:space:]]*["'\'']\?\(.*\)["'\'']\?$/\1/')
          # 5. Parse the filename: expected format: YYYY-MM-DD-title.md
          FILENAME=$(basename "$POST_FILE" .md)
          YEAR=$(echo "$FILENAME" | cut -d'-' -f1)
          MONTH=$(echo "$FILENAME" | cut -d'-' -f2)
          DAY=$(echo "$FILENAME" | cut -d'-' -f3)
          SLUG=$(echo "$FILENAME" | cut -d'-' -f4-)
          # 6. Construct the .html URL (your blog uses .html URLs)
          URL="https://lxsoftroxs.github.io/$YEAR/$MONTH/$DAY/$SLUG.html"
          # 7. Export variables for later steps
          echo "POST_TITLE=$TITLE" >> $GITHUB_ENV
          echo "POST_URL=$URL" >> $GITHUB_ENV

      - name: Send notification email
        run: |
          cat <<EOF | msmtp -a default "${{ env.EMAIL_LIST }}"
          Subject: New Post: "${{ env.POST_TITLE }}"

          Check out the new post: "${{ env.POST_TITLE }}"
          ${{ env.POST_URL }}
          EOF
